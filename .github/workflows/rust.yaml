name: Build and Release

on:
  push:
    branches: ["main"]
    tags: ["v*"]
  pull_request:
    branches: ["main"]

env:
  CARGO_TERM_COLOR: always

jobs:
  test:
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request'
    steps:
      - uses: actions/checkout@v4
      - uses: dtolnay/rust-toolchain@stable
      - run: cargo test --verbose

  build:
    runs-on: ${{ matrix.os }}
    if: github.event_name == 'push'
    strategy:
      matrix:
        include:
          - os: ubuntu-latest
            target: x86_64-unknown-linux-gnu
            artifact: srs-linux-x86_64
          - os: windows-latest
            target: x86_64-pc-windows-msvc
            artifact: srs-windows-x86_64.exe
          - os: macos-latest
            target: x86_64-apple-darwin
            artifact: srs-macos-x86_64
          - os: macos-latest
            target: aarch64-apple-darwin
            artifact: srs-macos-aarch64

    steps:
      - uses: actions/checkout@v4
      - uses: dtolnay/rust-toolchain@stable
        with:
          targets: ${{ matrix.target }}

      - uses: actions/cache@v4
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
            target
          key: ${{ runner.os }}-cargo-${{ matrix.target }}-${{ hashFiles('**/Cargo.lock') }}

      - name: Build
        run: cargo build --release --target ${{ matrix.target }}

      - uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix.artifact }}
          path: target/${{ matrix.target }}/release/srs${{ matrix.target == 'x86_64-pc-windows-msvc' && '.exe' || '' }}

  release:
    runs-on: ubuntu-latest
    needs: build

    steps:
      - uses: actions/checkout@v4

      - name: Get version from Cargo.toml
        id: version
        run: |
          VERSION=$(grep '^version = ' Cargo.toml | cut -d'"' -f2)
          echo "version=$VERSION" >> $GITHUB_OUTPUT
          echo "Release version: $VERSION"

      - uses: actions/download-artifact@v4
        with:
          path: ./artifacts

      - name: Rename and prepare release files
        run: |
          VERSION="${{ steps.version.outputs.version }}"
          cp ./artifacts/srs-linux-x86_64/srs ./srs-linux-x86_64-v$VERSION
          cp ./artifacts/srs-windows-x86_64.exe/srs.exe ./srs-windows-x86_64-v$VERSION.exe
          cp ./artifacts/srs-macos-x86_64/srs ./srs-macos-x86_64-v$VERSION
          cp ./artifacts/srs-macos-aarch64/srs ./srs-macos-aarch64-v$VERSION

          chmod +x ./srs-linux-x86_64-v$VERSION
          chmod +x ./srs-macos-x86_64-v$VERSION
          chmod +x ./srs-macos-aarch64-v$VERSION

      - uses: softprops/action-gh-release@v1
        with:
          tag_name: v${{ steps.version.outputs.version }}
          name: Release v${{ steps.version.outputs.version }}
          files: |
            ./srs-linux-x86_64-v${{ steps.version.outputs.version }}
            ./srs-windows-x86_64-v${{ steps.version.outputs.version }}.exe
            ./srs-macos-x86_64-v${{ steps.version.outputs.version }}
            ./srs-macos-aarch64-v${{ steps.version.outputs.version }}
          generate_release_notes: true
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
